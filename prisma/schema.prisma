// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// recommended to have `points` descending index set
model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  secret  String // if changed then all sessions will be lost (TODO add reset secret)
  joined  DateTime @default(now())
  lastActive  DateTime @default(now())
  points    Int
  role String?
  pendingFriends String[] //list of players to accept invites from
  friends String[] // friends ids
  email String? @unique
  bio String?
  profileHue Int?
  profileHue2 Int?
  avgAccSum Float?
  avgAccSumAmount Int?
  country String?

  scores  Score[]
  reports Report[]
  songComments SongComment[]
  avatar FileAvatar?
  background FileBackground?
}

// recommended to have `maxPoints` descending index set
model Song {
  id     String  @id @map("_id") // song name, it's difficulty and the hashed value of the chart
  scores Score[]
  comments SongComment[]
  maxPoints Float?
}

// recommended to have `score` and `points` descending index set
model Score {
  id         String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma

  score    Float
  accuracy Float
  points   Float
  sicks    Float
  goods    Float
  bads     Float
  shits    Float
  misses    Float

  playbackRate Float
  strum    Int

  submitted DateTime @default(now())
  modURL String?

  songRe Song? @relation(fields: [songId], references: [id])
  userRe User? @relation(fields: [player], references: [id])

  songId String? // filled by prisma
  player String? @db.ObjectId // filled by prisma

  replayData String? //deprecated, TODO

  replayFileRe FileReplay? @relation(fields: [replayFileId], references: [id])
  replayFileId String? @db.ObjectId @unique // id of File that stores the replay contents
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  content   String
  submitted DateTime @default(now())
  userRe    User     @relation(fields: [by], references: [id])
  by        String   @db.ObjectId
}

model SongComment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  content String
  at      Float
  userRe  User   @relation(fields: [by], references: [id])
  by      String @db.ObjectId
  song    Song   @relation(fields: [songid], references: [id])
  songid  String
}

model Club {
  id      String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  name    String @unique
  tag     String @unique
  members String[]
  pending String[]
  leaders String[]
  content String?
  hue     Int?
  points  BigInt
  created DateTime @default(now())
  banner  FileClubBanner?
}

model FileReplay {
  id      String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  data    Bytes
  size    BigInt
  date    DateTime @default(now())
  scoreRe Score?
}

model FileAvatar {
  id      String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  data    Bytes
  size    BigInt
  date    DateTime @default(now())
  ownerRe User     @relation(fields: [owner], references: [id])
  owner   String   @db.ObjectId @unique
}

model FileBackground {
  id      String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  data    Bytes
  size    BigInt
  date    DateTime @default(now())
  ownerRe User     @relation(fields: [owner], references: [id])
  owner   String   @db.ObjectId @unique
}

model FileClubBanner {
  id      String @id @default(auto()) @map("_id") @db.ObjectId // filled by prisma
  data    Bytes
  size    BigInt
  date    DateTime @default(now())
  clubRe  Club     @relation(fields: [clubTag], references: [tag])
  clubTag String   @unique
}